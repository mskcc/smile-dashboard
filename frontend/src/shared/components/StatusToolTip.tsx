import { ColDef, ITooltipParams } from "ag-grid-community";
import { AgGridReact } from "ag-grid-react";
import { DashboardSample } from "../../generated/graphql";

type SampleStatusMap = {
  [key: string]: {
    status: string;
    meaning: string;
    actionItem: string;
    responsibleParty: string;
  };
};

/**
 * @Key Concatenated string of key-value pairs from validationReport field of Sample's Status in the database.
 * Example: given "fastQs=missing,igoComplete=false", we'd get "fastQs missing" and "igoComplete false".
 * Note: when querying this data from the database, handle both formats: JSON string and {key=value} string.
 *
 * @Value Actionable details for the PM team.
 * Source: page 14 of PM SMILE manual at https://mskcc.sharepoint.com/:w:/t/CMOProjectManagers/EarBTW9ZqBxBlp34XsTT5zwBhID-kFZ10nUv13wwkIyZkg?e=M4hztj.
 */
const SAMPLE_STATUS_MAP: SampleStatusMap = {
  "baitSet missing": {
    status: "Baitset Missing",
    meaning: "Baitset field does not have a value assigned in LIMS",
    actionItem:
      "PMs contact IGO to fix and redeliver, let SMILE know once FASTQs are available by emailing them or " +
      "clicking 'Mark delivery' button",
    responsibleParty: "IGO",
  },
  "fastQs missing": {
    status: "FASTQs Missing",
    meaning: "FASTQs for sample were not sent to SMILE from IGO",
    actionItem:
      "PMs contact IGO to fix and redeliver, let SMILE know once FASTQs are available by emailing them or " +
      "clicking 'Mark delivery' button",
    responsibleParty: "IGO",
  },
  "igoComplete false": {
    status: "IGOComplete False",
    meaning: "IGOComplete checkbox was not ticked in LIMS",
    actionItem:
      "PMs contact IGO to fix and redeliver, let SMILE know once FASTQs are available by emailing them or " +
      "clicking 'Mark delivery' button",
    responsibleParty: "IGO",
  },
  "sample type abbreviation could not resolve based on specimenType, sampleOrigin, or sampleClass":
    {
      status: "Sample type abbreviation not resolved",
      meaning:
        "Metadata required for CMO Sample Name generation is missing/ incomplete",
      actionItem: "PMs update metadata in SMILE PM dashboard",
      responsibleParty: "PMs",
    },
  "recipe missing": {
    status: "Recipe Missing",
    meaning: "IGOComplete checkbox was not ticked in LIMS",
    actionItem:
      "PMs contact IGO to fix and redeliver, let SMILE know once FASTQs are available by emailing them or " +
      "clicking 'Mark delivery' button",
    responsibleParty: "IGO",
  },
  "normalizedPatientId missing from 'cmoSampleIdFields'": {
    status: "NormalizedPatientId Missing",
    meaning: "IGOComplete checkbox was not ticked in LIMS",
    actionItem:
      "PMs contact IGO to fix and redeliver, let SMILE know once FASTQs are available by emailing them or " +
      "clicking 'Mark delivery' button",
    responsibleParty: "IGO",
  },
  "specimenType (sampleClass) invalid": {
    status: "Specimen Type (Sample Class) Invalid",
    meaning:
      "The value for the IGO Specimen Pype (SMILE Sample Class) is not recognized",
    actionItem: "PMs update Specimen Type in SMILE PM dashboard",
    responsibleParty: "PMs",
  },
  "sampleType missing from 'cmoSampleIdFields'": {
    status: "Sample Type missing from 'cmoSampleIdFields'",
    meaning:
      "The label generator will fall back onto this field if the IGO Specimen Type (SMILE Sample Class) is not " +
      "missing or is not a recognized value. This field is auto generated by IGO as part of the sample metadata",
    actionItem: "PMs update Specimen Type in SMILE PM dashboard",
    responsibleParty: "PMs",
  },
  "sampleType invalid 'sampleType' from 'cmoSampleIdFields'": {
    status: "Sample Type Invalid in 'cmoSampleIdFields'",
    meaning:
      "The label generator will fall back onto this field if the IGO Specimen Type (SMILE Sample Class) is not " +
      "missing or is not a recognized value. This field is auto generated by IGO as part of the sample metadata",
    actionItem: "PMs update Specimen Type in SMILE PM dashboard",
    responsibleParty: "PMs",
  },
  "investigatorSampleId missing": {
    status: "InvestigatorSampleId Missing",
    meaning:
      "InvestigatorSampleId field does not have a value assigned in LIMS",
    actionItem: "PMs update InvestigatorSampleId in SMILE PM dashboard",
    responsibleParty: "PMs",
  },
};

const sampleStatusColDefs: ColDef[] = [
  {
    field: "status",
    headerName: "Status",
    width: 200,
  },
  {
    field: "meaning",
    headerName: "Meaning",
    width: 250,
  },
  {
    field: "actionItem",
    headerName: "Action Item",
    width: 250,
  },
  {
    field: "responsibleParty",
    headerName: "Responsible Party",
    width: 170,
  },
];

const defaultColDef: ColDef = {
  wrapText: true,
  autoHeight: true,
  cellStyle: {
    wordBreak: "break-word",
    lineHeight: "1.25",
    padding: "6px 18px",
  },
};

export const StatusTooltip = (props: ITooltipParams) => {
  let { primaryId, validationReport, validationStatus } =
    props.data as DashboardSample;

  console.log("Validation report", validationReport);

  let validationReportList;

  if (validationReport !== null && validationReport !== undefined) {
    let validationReportMap = new Map();

    try {
      // TODO: test this case
      // Parse the validation report JSON string
      // e.g. "{"fastQs":"missing","igoComplete":"false"}"
      validationReportMap = new Map(
        Object.entries(JSON.parse(validationReport))
      );
    } catch (e) {
      // TODO: test this case
      // Handle parsing the alternative format of the validation report data
      // e.g. "{fastQs=missing,igoComplete=false}"
      const cleanedReport = validationReport.replace(/[{}]/g, "");
      const reportArray = cleanedReport.split(",");
      for (const r of reportArray) {
        const [key, value] = r.split("=").map((str: String) => str.trim());
        validationReportMap.set(key, value);
      }
    }

    validationReportList = Array.from(
      validationReportMap,
      ([fieldName, report]) => ({
        ...SAMPLE_STATUS_MAP[`${fieldName} ${report}`],
      })
    );
  } else {
    validationStatus = false;
    // TODO: test this case
    validationReportList = [
      {
        status: "Data error",
        meaning: "Validation status is missing from this sample",
        actionItem: "Please contact the SMILE team",
        responsibleParty: "SMILE",
      },
    ];
  }

  console.log("validationReportList", validationReportList);

  if (!validationStatus) {
    return (
      <div className="tooltip-styles">
        <p>Error report for {`${primaryId}`}</p>
        <div className="ag-theme-alpine" style={{ width: 880 }}>
          <AgGridReact
            rowData={validationReportList}
            columnDefs={sampleStatusColDefs}
            defaultColDef={defaultColDef}
            domLayout="autoHeight"
          ></AgGridReact>
        </div>
      </div>
    );
  } else {
    return "";
  }
};
