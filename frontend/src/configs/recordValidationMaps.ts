/**
 * Row-level data type for the validation report modal of a Sample/Request.
 */
export type StatusItem = {
  item: string;
  description: string;
  actionItem: string;
  responsibleParty: string;
  sampleLevelValidationHeader?: string; // for request validation only
  igoId?: string; // for request validation only
};

/**
 * @Key Concatenated string of key-value pairs from the validationReport value of Status in the database to
 * ensure unique keys for each status item in this map. For example, given "fastQs=missing,igoComplete=false",
 * we'd use "fastQs missing" and "igoComplete false" as the keys, respectively.
 */
export type StatusMap = {
  [key: string]: StatusItem;
};

export function getActionItemForMissingIgoField(fieldName: string): string {
  return (
    `PMs contact IGO to fix and redeliver, let SMILE know once ${fieldName} is updated by emailing` +
    ` them or clicking 'Mark delivery' button`
  );
}

export const SAMPLE_STATUS_MAP: StatusMap = {
  "baitSet missing": {
    item: "Baitset missing",
    description: "Baitset field does not have a value assigned in IGO LIMS",
    actionItem: getActionItemForMissingIgoField("baitset"),
    responsibleParty: "IGO",
  },
  "fastQs missing": {
    item: "FASTQs missing",
    description: "FASTQs for sample were not sent to SMILE from IGO",
    actionItem: getActionItemForMissingIgoField("FASTQs"),
    responsibleParty: "IGO",
  },
  "igoComplete false": {
    item: "IGOComplete false",
    description: "IGOComplete checkbox was not ticked in LIMS",
    actionItem: getActionItemForMissingIgoField("IGOComplete"),
    responsibleParty: "IGO",
  },
  "sample type abbreviation could not resolve based on specimenType, sampleOrigin, or sampleClass":
    {
      item: "Sample type abbreviation not resolved",
      description:
        "Metadata required for CMO Sample Name generation is missing, incomplete, or flagged as invalid.",
      actionItem: "PMs update metadata in SMILE PM dashboard",
      responsibleParty: "PMs",
    },
  "recipe missing": {
    item: "Recipe missing from IGO data",
    description: "Recipe field does not have a value assigned in IGO LIMS",
    actionItem: getActionItemForMissingIgoField("recipe"),
    responsibleParty: "IGO",
  },
  "normalizedPatientId missing from 'cmoSampleIdFields'": {
    item: "NormalizedPatientId missing",
    description:
      "NormalizedPatientId field does not have a value assigned in IGO LIMS",
    actionItem: getActionItemForMissingIgoField("normalizedPatientId"),
    responsibleParty: "IGO",
  },
  "specimenType (sampleClass) invalid": {
    item: "Specimen Type (Sample Class) invalid",
    description:
      "The value for the IGO Specimen Type (SMILE Sample Class) is not recognized",
    actionItem: "PMs update 'Sample Class' in SMILE PM dashboard",
    responsibleParty: "PMs",
  },
  "sampleType missing from 'cmoSampleIdFields'": {
    item: "Sample Type missing from 'cmoSampleIdFields'",
    description:
      "The label generator will fall back onto this field if the IGO Specimen Type (SMILE Sample Class) is " +
      "missing or is not a recognized value. This field is auto generated by IGO as part of the sample metadata. " +
      "IGO may also refer to this field as 'Examplar Sample Type'.",
    actionItem: "PMs update 'Sample Class' in SMILE PM dashboard",
    responsibleParty: "PMs",
  },
  "sampleType invalid 'sampleType' from 'cmoSampleIdFields'": {
    item: "Sample Type invalid in 'cmoSampleIdFields'",
    description:
      "The label generator will fall back onto this field if the IGO Specimen Type (SMILE Sample Class) is " +
      "missing or is not a recognized value. This field is auto generated by IGO as part of the sample metadata. " +
      "IGO may also refer to this field as 'Examplar Sample Type'.",
    actionItem: "PMs update 'Sample Class' in SMILE PM dashboard",
    responsibleParty: "PMs",
  },
  "investigatorSampleId missing": {
    item: "InvestigatorSampleId missing",
    description:
      "InvestigatorSampleId field does not have a value assigned in IGO LIMS",
    actionItem: "PMs update InvestigatorSampleId in SMILE PM dashboard",
    responsibleParty: "PMs",
  },
  "cmoPatientId missing": {
    item: "cmoPatientId missing",
    description:
      "cmoPatientId field does not have a value assigned in IGO LIMS",
    actionItem: getActionItemForMissingIgoField("cmoPatientId"),
    responsibleParty: "IGO",
  },
  "igoId missing": {
    item: "IGO ID missing",
    description: "IGO ID field does not have a value assigned in IGO LIMS",
    actionItem: getActionItemForMissingIgoField("igoId"),
    responsibleParty: "IGO",
  },
};

export const REQUEST_STATUS_MAP: StatusMap = {
  "isCmo SMILE CMO request filter is enabled and request JSON received has 'cmoRequest': false. This value must be set to true for import into SMILE.":
    {
      item: "isCmo false",
      description:
        "SMILE CMO request filter is enabled and request JSON received has 'cmoRequest': false. " +
        "This value must be set to true for import into SMILE. Please note that IGO sets this value based " +
        "on a combination of properties from the IGO Request such as gene panel, lab name, etc.",
      actionItem: getActionItemForMissingIgoField("cmoRequest"),
      responsibleParty: "IGO",
    },
  "samples (missing) Request JSON is missing 'samples' or 'samples' is an empty list.":
    {
      item: "samples (missing)",
      description:
        "Request JSON from IGO LIMS REST API is missing 'samples' or 'samples' is an empty list.",
      actionItem: getActionItemForMissingIgoField("samples"),
      responsibleParty: "IGO",
    },
  "samples (failed) Some request samples failed validation": {
    item: "samples (failed)",
    description: "Some request samples failed validation",
    actionItem:
      "Sample validation errors of critically failed samples are listed below. See the Request Samples view" +
      " for errors of tolerable failures. If anything is missing or incorrect, please contact the SMILE team.",
    responsibleParty: "",
  },
  "samples (failed) All request samples failed validation": {
    item: "samples (failed)",
    description: "All request samples failed validation",
    actionItem:
      "Review each sample's validation error below. If sample-level errors are missing or incorrect, please" +
      " contact the SMILE team.",
    responsibleParty: "",
  },
};

/**
 * AG Grid data to use when a Sample/Request is missing a corresponding Status in the database.
 */
export const MISSING_STATUS: StatusItem[] = [
  {
    item: "Data error",
    description: "Validation status is missing from this record",
    actionItem: "PMs contact the SMILE team",
    responsibleParty: "SMILE",
  },
];
